// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resumes.Db;

namespace Resumes.Db.Migrations
{
    [DbContext(typeof(ResumesDbContext))]
    partial class ResumesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("Resumes.Db.Models.Applicants.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AreaId")
                        .IsRequired();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<long?>("GenderId")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("GenderId");

                    b.ToTable("APPLICANTS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Applicants.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("GENDERS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Certificates.Certificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("ResumeId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("CERTIFICATES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Driving.DrivingLicenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("DRIVING_LICENSE_TYPES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Driving.ResumeDrivingLicenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DrivingLicenseTypeId");

                    b.Property<long>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("DrivingLicenseTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_DRIVING_LICENSE_TYPES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Educations.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate");

                    b.Property<long>("EducationalLevelId");

                    b.Property<long>("FacultyId");

                    b.Property<DateTime>("GraduationDate");

                    b.Property<long>("ResumeId");

                    b.Property<string>("School");

                    b.HasKey("Id");

                    b.HasIndex("EducationalLevelId");

                    b.HasIndex("ResumeId");

                    b.ToTable("EDUCATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Educations.EducationSpecialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EducationId");

                    b.Property<long>("SpecializationId");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EDUCATION_SPECIALIZATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Educations.EducationalLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EDUCATIONAL_LEVELS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Employments.Employment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EMPLOYMENTS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Employments.ResumeEmployment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EmploymentId");

                    b.Property<long>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_EMPLOYMENTS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Experiences.Experience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndAt");

                    b.Property<long>("IndustryId");

                    b.Property<long>("ResumeId");

                    b.Property<long>("SpecializationId");

                    b.Property<DateTime>("StartedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("EXPERIENCES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.Property<string>("Building")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<long?>("StationId");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StationId");

                    b.ToTable("ADDRESSES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("MetroId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("AREAS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Line", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HexColor");

                    b.Property<long>("MetroId");

                    b.HasKey("Id");

                    b.HasIndex("MetroId");

                    b.ToTable("LINES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Metro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .IsUnique();

                    b.ToTable("METRO");
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<long>("LineId");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("LineId");

                    b.ToTable("STATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Industries.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("INDUSTRIES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Languages.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("LANGUAGES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Languages.LanguageLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("LANGUAGE_LEVELS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Languages.LanguageSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("LanguageId")
                        .IsRequired();

                    b.Property<long?>("LevelId")
                        .IsRequired();

                    b.Property<long>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.HasIndex("ResumeId");

                    b.ToTable("LANGUAGE_SKILLS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Negotiations.Response", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("RESPONSES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Negotiations.ResumeNegotiation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message");

                    b.Property<long?>("ResponseId");

                    b.Property<long>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RESUME_NEGOTIATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Resume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<Guid>("ApplicantId");

                    b.Property<long?>("AreaId");

                    b.Property<long?>("BusinessTripReadinessId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("HasVehicle");

                    b.Property<bool>("IsPremium");

                    b.Property<long?>("MetroStationId");

                    b.Property<string>("PhotoUrl");

                    b.Property<long?>("ResumeLocaleId");

                    b.Property<long?>("ResumeStatusId");

                    b.Property<long?>("SalaryId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<long?>("TravelTimeId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("AreaId");

                    b.HasIndex("BusinessTripReadinessId");

                    b.HasIndex("MetroStationId");

                    b.HasIndex("ResumeLocaleId");

                    b.HasIndex("ResumeStatusId");

                    b.HasIndex("TravelTimeId");

                    b.ToTable("RESUMES");
                });

            modelBuilder.Entity("Resumes.Db.Models.ResumeAreas.Citizenship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.Property<long>("ResumeId");

                    b.Property<long?>("ResumeId1");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("ResumeId1");

                    b.ToTable("CITIZENSHIPS");
                });

            modelBuilder.Entity("Resumes.Db.Models.ResumeAreas.WorkTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.Property<long>("ResumeId");

                    b.Property<long?>("ResumeId1");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ResumeId");

                    b.HasIndex("ResumeId1");

                    b.ToTable("WORK_TICKETS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Salaries.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("CURRENCIES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Salaries.Salary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CurrencyId")
                        .IsRequired();

                    b.Property<decimal>("From");

                    b.Property<long>("ResumeId");

                    b.Property<decimal>("To");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ResumeId")
                        .IsUnique();

                    b.ToTable("SALARIES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Schedules.ResumeSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ResumeId");

                    b.Property<long>("ScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("RESUME_SCHEDULES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Schedules.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("SCHEDULES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Skills.ResumeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ResumeId");

                    b.Property<long>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SkillId");

                    b.ToTable("RESUME_SKILLS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Skills.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("SKILLS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Specializations.ResumeSpecialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ResumeId");

                    b.Property<long>("SpecializationId");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("RESUME_SPECIALIZATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Specializations.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("SPECIALIZATIONS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Statuses.ResumeStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("RESUME_STATUSES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Travel.BusinessTripReadiness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("BUSINESS_TRIP_READINESS");
                });

            modelBuilder.Entity("Resumes.Db.Models.Travel.Relocation.RelocationPossibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.Property<long>("RelocationTypeId");

                    b.Property<long>("ResumeId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RelocationTypeId");

                    b.HasIndex("ResumeId");

                    b.ToTable("RELOCATION_POSSIBILITIES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Travel.Relocation.RelocationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("RELOCATION_TYPES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Travel.TravelTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TRAVEL_TIMES");
                });

            modelBuilder.Entity("Resumes.Db.Models.Applicants.Applicant", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Applicants.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Certificates.Certificate", b =>
                {
                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Certificates")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Driving.ResumeDrivingLicenseType", b =>
                {
                    b.HasOne("Resumes.Db.Models.Driving.DrivingLicenseType", "DrivingLicenseType")
                        .WithMany()
                        .HasForeignKey("DrivingLicenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("DrivingLicenseTypes")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Educations.Education", b =>
                {
                    b.HasOne("Resumes.Db.Models.Educations.EducationalLevel", "EducationalLevel")
                        .WithMany()
                        .HasForeignKey("EducationalLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Education")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Educations.EducationSpecialization", b =>
                {
                    b.HasOne("Resumes.Db.Models.Educations.Education", "Education")
                        .WithMany("Specializations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Employments.ResumeEmployment", b =>
                {
                    b.HasOne("Resumes.Db.Models.Employments.Employment", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Employments")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Experiences.Experience", b =>
                {
                    b.HasOne("Resumes.Db.Models.Industries.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Experience")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Address", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Resumes.Db.Models.Geographic.Metro.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Area", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Parent")
                        .WithMany("Areas")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Line", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Metro.Metro", "Metro")
                        .WithMany("Lines")
                        .HasForeignKey("MetroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Metro", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithOne("Metro")
                        .HasForeignKey("Resumes.Db.Models.Geographic.Metro.Metro", "AreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Geographic.Metro.Station", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Metro.Line", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Industries.Industry", b =>
                {
                    b.HasOne("Resumes.Db.Models.Industries.Industry", "Parent")
                        .WithMany("Industries")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Languages.LanguageSkill", b =>
                {
                    b.HasOne("Resumes.Db.Models.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Languages.LanguageLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Languages")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Negotiations.ResumeNegotiation", b =>
                {
                    b.HasOne("Resumes.Db.Models.Negotiations.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Negotiations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Resume", b =>
                {
                    b.HasOne("Resumes.Db.Models.Applicants.Applicant", "Applicant")
                        .WithMany("Resumes")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Travel.BusinessTripReadiness", "BusinessTripReadiness")
                        .WithMany()
                        .HasForeignKey("BusinessTripReadinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Geographic.Metro.Station", "MetroStation")
                        .WithMany()
                        .HasForeignKey("MetroStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Languages.Language", "ResumeLocale")
                        .WithMany()
                        .HasForeignKey("ResumeLocaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Statuses.ResumeStatus", "ResumeStatus")
                        .WithMany()
                        .HasForeignKey("ResumeStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Travel.TravelTime", "TravelTime")
                        .WithMany()
                        .HasForeignKey("TravelTimeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.ResumeAreas.Citizenship", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume")
                        .WithMany("Citizenship")
                        .HasForeignKey("ResumeId1");
                });

            modelBuilder.Entity("Resumes.Db.Models.ResumeAreas.WorkTicket", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume")
                        .WithMany("WorkTicket")
                        .HasForeignKey("ResumeId1");
                });

            modelBuilder.Entity("Resumes.Db.Models.Salaries.Salary", b =>
                {
                    b.HasOne("Resumes.Db.Models.Salaries.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithOne("Salary")
                        .HasForeignKey("Resumes.Db.Models.Salaries.Salary", "ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Schedules.ResumeSchedule", b =>
                {
                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Schedules")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Schedules.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Skills.ResumeSkill", b =>
                {
                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Specializations.ResumeSpecialization", b =>
                {
                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("Specializations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Specializations.Specialization", b =>
                {
                    b.HasOne("Resumes.Db.Models.Specializations.Specialization", "Parent")
                        .WithMany("Specializations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Resumes.Db.Models.Travel.Relocation.RelocationPossibility", b =>
                {
                    b.HasOne("Resumes.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Travel.Relocation.RelocationType", "RelocationType")
                        .WithMany()
                        .HasForeignKey("RelocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Resumes.Db.Models.Resume", "Resume")
                        .WithMany("RelocationPossibility")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
