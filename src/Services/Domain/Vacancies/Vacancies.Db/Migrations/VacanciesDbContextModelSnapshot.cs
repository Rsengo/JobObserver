// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vacancies.Db;

namespace Vacancies.Db.Migrations
{
    [DbContext(typeof(VacanciesDbContext))]
    partial class VacanciesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changed");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Kind");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("Vacancies.Db.Models.BrandedTemplates.BrandedTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("BRANDED_TEMPLATES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Driving.DrivingLicenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("DRIVING_LICENSE_TYPES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Driving.VacancyDrivingLicenseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DrivingLicenseTypeId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("DrivingLicenseTypeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VACANCY_DRIVING_LICENSE_TYPES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Employers.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("DEPARTMENTS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Employers.Employer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym");

                    b.Property<long?>("AreaId");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SiteUrl");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("AreaId");

                    b.ToTable("EMPLOYERS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Employments.Employment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EMPLOYMENTS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.Property<string>("Building")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<long?>("StationId");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StationId");

                    b.ToTable("ADDRESSES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("MetroId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AREAS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Line", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HexColor");

                    b.Property<long>("MetroId");

                    b.HasKey("Id");

                    b.HasIndex("MetroId");

                    b.ToTable("LINES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Metro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AreaId");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .IsUnique();

                    b.ToTable("METRO");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<long>("LineId");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("LineId");

                    b.ToTable("STATIONS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Industries.Industry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("INDUSTRIES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Languages.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("LANGUAGES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Languages.LanguageLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("LANGUAGE_LEVELS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Languages.LanguageSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("LanguageId")
                        .IsRequired();

                    b.Property<long?>("LevelId")
                        .IsRequired();

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.HasIndex("VacancyId");

                    b.ToTable("LANGUAGE_SKILLS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Negotiations.Response", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("RESPONSES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Negotiations.VacancyNegotiation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicantId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Message");

                    b.Property<long?>("ResponseId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VACANCY_NEGOTIATIONS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Salaries.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .IsRequired();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("CURRENCIES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Salaries.Salary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CurrencyId")
                        .IsRequired();

                    b.Property<decimal>("From");

                    b.Property<decimal>("To");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("VacancyId")
                        .IsUnique();

                    b.ToTable("SALARIES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Schedules.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("SCHEDULES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Skills.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("SKILLS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Skills.VacancySkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SkillId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VACANCY_SKILLS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Specializations.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("SPECIALIZATIONS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Specializations.VacancySpecialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SpecializationId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VACANCY_SPECIALIZATIONS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Statuses.VacancyStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("VACANCY_STATUSES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Tests.VacancyTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("TestId");

                    b.Property<long>("VacancyId");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.ToTable("VACANCY_TESTS");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Vacancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptHandicapped");

                    b.Property<long?>("AddressId");

                    b.Property<bool>("AllowMessages");

                    b.Property<long?>("DepartmentId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("EmployerId");

                    b.Property<long?>("EmploymentId");

                    b.Property<DateTime>("ExpiresAt");

                    b.Property<long>("IndustryId");

                    b.Property<bool>("IsPremium");

                    b.Property<Guid?>("ManagerId");

                    b.Property<DateTime>("PublishedAt");

                    b.Property<bool>("RequiredVehicle");

                    b.Property<bool>("ResponseLetterRequired");

                    b.Property<bool>("ResponseNotification");

                    b.Property<long?>("SalaryId");

                    b.Property<long?>("ScheduleId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<long>("VacancyStatusId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VacancyStatusId");

                    b.ToTable("VACANCIES");
                });

            modelBuilder.Entity("Vacancies.Db.Models.BrandedTemplates.BrandedTemplate", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithOne("BrandedDescription")
                        .HasForeignKey("Vacancies.Db.Models.BrandedTemplates.BrandedTemplate", "VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Driving.VacancyDrivingLicenseType", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Driving.DrivingLicenseType", "DrivingLicenseType")
                        .WithMany()
                        .HasForeignKey("DrivingLicenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("DrivingLicenseTypes")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Employers.Department", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Employers.Employer", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Employers.Employer", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Address", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vacancies.Db.Models.Geographic.Metro.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Area", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Area", "Parent")
                        .WithMany("Areas")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Line", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Metro.Metro", "Metro")
                        .WithMany("Lines")
                        .HasForeignKey("MetroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Metro", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Area", "Area")
                        .WithOne("Metro")
                        .HasForeignKey("Vacancies.Db.Models.Geographic.Metro.Metro", "AreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Geographic.Metro.Station", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Metro.Line", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Industries.Industry", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Industries.Industry", "Parent")
                        .WithMany("Industries")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Languages.LanguageSkill", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Languages.LanguageLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("Languages")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Negotiations.VacancyNegotiation", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Negotiations.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("Negotiations")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Salaries.Salary", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Salaries.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithOne("Salary")
                        .HasForeignKey("Vacancies.Db.Models.Salaries.Salary", "VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Skills.VacancySkill", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("KeySkills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Specializations.Specialization", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Specializations.Specialization", "Parent")
                        .WithMany("Specializations")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Specializations.VacancySpecialization", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("Specializations")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Tests.VacancyTest", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Vacancy", "Vacancy")
                        .WithMany("Tests")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Vacancies.Db.Models.Vacancy", b =>
                {
                    b.HasOne("Vacancies.Db.Models.Geographic.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vacancies.Db.Models.Employers.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Employers.Employer", "Employer")
                        .WithMany("Vacancies")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Vacancies.Db.Models.Employments.Employment", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Industries.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Schedules.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Vacancies.Db.Models.Statuses.VacancyStatus", "VacancyStatus")
                        .WithMany()
                        .HasForeignKey("VacancyStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
